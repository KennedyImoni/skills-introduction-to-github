    # Write your code below this line ðŸ‘‡
import math

def paint_calc(height, width, cover):
    numberOfCan = (height * width)/ cover
    roundUpCan = math.ceil(numberOfCan)
    print(f"You'll need {roundUpCan} cans of paint.")


test_h = int(input("Enter Height of wall:")) # Height of wall (m)
test_w = int(input("Enter Width of wall:")) # Width of wall (m)
coverage = 5


    # Write your code above this line ðŸ‘†
    # Define a function called paint_calc() so the code below works.   

    # ðŸš¨ Don't change the code below ðŸ‘‡

paint_calc(height=test_h, width=test_w, cover=coverage)


############################################################
############################################################

#password generator project

#Password Generator Project
import random
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']

print("Welcome to the PyPassword Generator!")
nr_letters= int(input("How many letters would you like in your password?\n")) 
nr_symbols = int(input(f"How many symbols would you like?\n"))
nr_numbers = int(input(f"How many numbers would you like?\n"))

password = []
#Eazy Level - Order not randomised:
#e.g. 4 letter, 2 symbol, 2 number = JduE&!91
for letter in range(0, nr_letters+1):
  password.append(random.choice(letters))
for number in range(0, nr_numbers+1):
  password.append(random.choice(numbers))
for symbol in range(0, nr_symbols+1):
  password.append(random.choice(symbols))
  
random.shuffle(password)
print(''.join(password))



####################################################################
####################################################################


#highscore proejct

# Input a list of student student_scores
student_scores = input("student_scores:").split()
for n in range(0, len(student_scores)):
  student_scores[n] = int(student_scores[n])

highest_score = student_scores[0]

# Loop through the list and find the highest score
for score in student_scores:
    if score > highest_score:
        highest_score = score
    elif score < highest_score:
        lowestScore = score

student_names = input("Enter student names separated by spaces: ").split()

# Check if the number of student_scores matches the number of student names
if len(student_scores) != len(student_names):
    print("The number of student_scores does not match the number of students.")
else:
    # Find the index of the highest score
    highest_score_index = student_scores.index(highest_score)
    lowestScoreIndex = student_scores.index(lowestScore)
    # Get the student name with the highest score
    highest_student = student_names[highest_score_index]
    lowest_student = student_names[lowestScoreIndex]

    # Print the highest score and the corresponding student name
    print("The highest score is:", highest_score)
    print("The student with the highest score is:", highest_student)
    print("The lowest score is:", lowestScore)
    print("The student with the lowest score is:", lowest_student)



############################################################
############################################################

#print 1-100

    
#print 0 to 100

#numbers = 0
number = 100
for number in range(1, number +1):
  if number % 3 == 0 and number % 5 == 0:
    print("FizzBuzz")
  elif number % 3 == 0:
      print("Fizz")
  elif number % 5 == 0:
        print("Buzz")
  else:
    print(number)


##################################################

def primeNumber(number):
  # Convert the input to an integer
  inputNumber = int(input("Input number: "))

  # Prime numbers are greater than 1
  if inputNumber <= 1:
      print("This is not a prime number")
      return

  # Check for factors other than 1 and the number itself
  for i in range(2, int(inputNumber ** 0.5) + 1):
      if inputNumber % i == 0:
          print("This is not a prime number")
          return

  # If no factors were found, it is a prime number
  print("This is a prime number")

# Call the function to check for prime numbers
primeNumber(number=1)  
# The argument here is just a placeholder and is not used in the function



##########################################################################
##########################################################################

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z','a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
text = input("Type your message:\n").lower()
shift = int(input("Type the shift number:\n"))

#TODO-1: Create a function called 'encrypt' that takes the 'text' and 'shift' as inputs.
def encrypter(textLetter, shiftAmount):
    encryptedText = ""
    for letter in text:
        if letter in alphabet:
            position = alphabet.index(letter)
            new_position = position + shiftAmount
            encryptedText += alphabet[new_position]
        else:
            encryptedText += letter
    print(f"The encoded text is {encryptedText}")
l#TODO-2: Inside the 'encrypt' function, shift each letter of the 'text' forwards in the alphabet by the shift amount and print the encrypted text.  

encrypte_text = encrypter(textLetter=text, shiftAmount=shift)


##########################################################

country = input("Enter the country name: ")  # Add country name
visits = int(input("Enter the number of visits: "))  # Number of visits
list_of_cities = eval(input("Enter the list of cities (formatted as ['city1', 'city2', ...]): "))  # Create list from formatted string

travel_log = [
    {
      "country": "France",
      "visits": 12,
      "cities": ["Paris", "Lille", "Dijon"]
    },
    {
      "country": "Germany",
      "visits": 5,
      "cities": ["Berlin", "Hamburg", "Stuttgart"]
    },
]

# Do NOT change the code above ðŸ‘†

# TODO: Write the function that will allow new countries
# to be added to the travel_log.
def add_new_country(countr, visit, list_of_city):
    new_country = {}
    new_country["country"] = countr
    new_country["visits"] = visit
    new_country["cities"] = list_of_city
    travel_log.append(new_country)
    print(travel_log)

# Do not change the code below ðŸ‘‡
add_new_country(countr=country, visit=visits, list_of_city=list_of_cities)

print(f"I've been to {travel_log[-1]['country']} {travel_log[-1]['visits']} times.")
print(f"My favourite city was {travel_log[-1]['cities'][0]}.")


####################################################################
####################################################################

from replit import clear
# Initialize the bidding dictionary
bidding = {}
# Function to add a bid to the dictionary
still_Bidding = True
# Main loop for the bidding process
while still_Bidding:
    nameInput = input("What is your name? ")
    bidInput = int(input("What is your bid? $"))  # Convert bid input to integer
    bidding[nameInput] = bidInput  # Add the bid to the dictionary
    more_bids = input("Are there any other bidders? Type 'yes' or 'no'. ")
    if more_bids == "no":
        still_Bidding = False
        break
    elif more_bids == "yes":
        clear()
        
def add_bid(bidding_dictionary):
    for bid in bidding_dictionary:
        bid_amount = bidding_dictionary[bid]
        highest_bid = 0
        if bid_amount > highest_bid:
            highest_bid = bid_amount
            winner = bid
    print(f"The winner is {winner} with a bid of ${highest_bid}")
    
add_bid(bidding)

    


  
